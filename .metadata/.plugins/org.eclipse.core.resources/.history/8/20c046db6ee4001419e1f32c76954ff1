//////////////////////////////////////////////////////////////////////////////
//                   ALL STUDENTS COMPLETE THESE SECTIONS

// Main Class File:  FileSystemMain.java
// File:             User.java
// Semester:         CS367 Spring 2015
//
// Author:           Qihong Lu
// Email:            qlu36@wisc.edu
// CS Login:         qihong
// Lecturer's Name:  Jim Skrentny
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION //////////////////
//
// Pair Partner:     Qianyun Ma
// Email:            qma27@wisc.edu
// CS Login:         qianyun
// Lecturer's Name:  Jim Skrentny
//
//////////////////////////// 80 columns wide /////////////////////////////////
import java.util.ArrayList;

/**
 * The User class represents a user having a name (as a String), 
 * folders (as a list of SimpleFolder), files (as a list of SimpleFile) 
 * owned by the user.
 * @author Qihong
 */
public class User {

	private String name; //name of the user.
	private ArrayList<SimpleFile> files;//list of files owned/created by user
	private ArrayList<SimpleFolder> folders;//list of folder owned by user.

	/**
	 * Constructs a user with name. It also initializes the lists 
	 * appropriately.
	 * @param name
	 */
	public User(String name) {
		if(name == null) throw new IllegalArgumentException();
		this.name = name;
		this.files = new ArrayList<SimpleFile>();
		this.folders = new ArrayList<SimpleFolder>();
	}

	/**
	 * Override the equals method of the object to compare two users on the 
	 * NAME field. 
	 * @return true if names are the same, false otherwise.
	 */
	@Override
	public boolean equals(Object obj) {
		if(obj == null) throw new IllegalArgumentException();
		// convert the object to a user type
		User tempUser = (User) obj;	  
		// two users are the same if they have THE SAME NAME!
		if(tempUser.getName() == this.name)
			return true;
		return false;
	}

	/**
	 * returns the name of the user.
	 * @return name
	 */
	public String getName() {
		return this.name;
	}


	/**
	 * returns the list of files owned by the user.
	 * @return files
	 */
	public ArrayList<SimpleFile> getFiles() {
		return this.files;
	}

	/**
	 * adds the file to the list of files owned by the user.
	 * @param newfile - the file you want to add
	 */
	public void addFile(SimpleFile newfile) {
		if(newfile == null) throw new IllegalArgumentException();
		this.files.add(newfile);
	} 

	/**
	 * Removes the file from the list of owned files of the user. 
	 * @param rmFile the file you want to remove 
	 * @return true if the delete was successful, false otherwise. 
	 */
	public boolean removeFile(SimpleFile rmFile){
		if(rmFile == null) throw new IllegalArgumentException();
		// if rmFile exists in the arraylist of files  
		if(files.contains(rmFile)){
			// remove it 
			files.remove(rmFile);
			return true;
		}
		return false;
	}

	/**
	 * returns the list of folders owned by the user.
	 * @return the array list of folders
	 */
	public ArrayList<SimpleFolder> getFolders() {
		return this.folders;
	}

	/**
	 * adds the folder to the list of folders owned by the user.
	 * @param newFolder - the folder you want to add
	 */
	public void addFolder(SimpleFolder newFolder) {
		if(newFolder == null) throw new IllegalArgumentException(); 
		this.folders.add(newFolder);
	}

	/**
	 * removes the folder from the list of folders owned by the user.
	 * @param rmFolder
	 * @return true is the removal was successful, false otherwise
	 */
	public boolean removeFolder(SimpleFolder rmFolder){
		if(rmFolder == null) throw new IllegalArgumentException();
		// if rmFolder exists in the arraylist of folders  
		if(folders.contains(rmFolder)){
			// remove it 
			folders.remove(rmFolder);
			return true;
		}
		return false;
	}

	/**
	 * returns the string representation of the user object.
	 * @return retType
	 */
	@Override
	public String toString() {
		String retType = name + "\n";
		retType = retType + "Folders owned :\n";
		for(SimpleFolder preFolder : folders){
			retType = retType + "\t" + preFolder.getPath() + "/" + preFolder.getName() + "\n";
		}
		retType = retType + "\nFiles owned :\n"; 
		for(SimpleFile preFile : files){
			retType = retType + "\t" + preFile.getPath() + "/" + preFile.getName() + "." + preFile.getExtension().toString() + "\n";
		}
		return retType;
	}
}
