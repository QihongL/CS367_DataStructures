import java.util.Iterator;

public class DLinkedList<E> implements ListADT<E>, Iterable<E>{	
	// private field
	private Listnode<E> head;
	private int numItems;

	/**
	 * constructor
	 * */
	public DLinkedList(){
		head = null;
		numItems = 0;
	}
	
	
	
	/**
	 * Add an item to the end 
	 * 
	 * @param item - the item that you want to add to the end 
	 * */
	@Override
	public void add(E item) {
		// TODO 
		// Input validation 
		if (item == null)
			throw new IllegalArgumentException();
		// create a new listnode with input data
		Listnode <E> newnode = new Listnode<E> (item);
		Listnode <E> cur;
		if (head == null){
			head = newnode;
		} else {
			cur = head;
			// go to the end of the listnodes
			while(cur.getNext() != null){
				cur = cur.getNext();
			}			
			// set the last one to be the newnode
			cur.setNext(newnode);
		}
		numItems ++;
	}
	
	/**
	 * Add an item to a particular position 
	 * 
	 * @param pos - the position where you want to add an item 
	 * @param item - the item that you want to add 
	 */
	@Override
	public void add(int pos, E item) {
		// TODO Auto-generated method stub
	    // check for bad position
	    if (pos < 0 || pos > numItems) {
	        throw new IndexOutOfBoundsException();
	    }
	    // if asked to add to end, let the other add method do the work
	    if (pos == numItems) {
	        add(item);
	    }
	    // find the node n after which to add a new node and add the new node
	    Listnode<E> cur = head;
	    for (int k = 0; k < pos; k++) {
	        cur = cur.getNext();
	    }
	    Listnode<E> newnode = new Listnode<E>(item);
	    newnode.setNext(cur.getNext());
	    cur.setNext(newnode);
	    numItems++;
	}

	
	/**
	 * Check if the list contains the input item 
	 * 
	 * @param item - the item you want to check 
	 */
	@Override
	public boolean contains(E item) {
		// TODO Auto-generated method stub
		return false;
	}

	
	/**
	 * Get an item on a particular position 
	 * 
	 * @param pos - the index of the item
	 */
	@Override
	public E get(int pos) {
		// TODO Auto-generated method stub
		// input validation 
		if(pos < 0 || pos >= numItems)
			throw new IndexOutOfBoundsException();
		Listnode<E> cur = head;
		// traverse to the position 
		for(int i = 0; i < pos; i ++){
			cur = cur.getNext();
		}
		return cur.getData();
	}

	/**
	 * Check if the list is empty 
	 */
	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		if (numItems == 0 )
			return true;
		else 
			return false;
	}

	/**
	 * Remove an item on a particular position 
	 */
	@Override
	public E remove(int pos) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}


	@Override
	public Iterator<E> iterator() {
		// TODO Auto-generated method stub
		return null;
	}

}
