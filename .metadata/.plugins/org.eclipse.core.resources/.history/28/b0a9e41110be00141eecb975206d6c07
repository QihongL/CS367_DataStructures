import java.util.ArrayList;


public class CS367_HW4_2 {

	// If myQ or myS is null, throw an IllegalArgumentException.
	// If myQ or myS is empty, return false.
	// Otherwise return true if and only if any object in myQ is also in myS.
	// When the method finishes, the contents of myQ and myS should be the same as
	// in they were originally.
	public static <E> boolean findMatch(SimpleQueue<E> myQ, SimpleStack<E> myS) throws EmptyQueueException {
		SimpleStack<E> copyS = new SimpleStack<E>();
		SimpleQueue<E> copyQ = new SimpleQueue<E>();

		// validations 
		if (myQ == null || myS == null) throw new IllegalArgumentException();  
		if (myQ.isEmpty() || myS.isEmpty()) return false;

		
		// loop over the stack
		while(!myS.isEmpty()){
			// push every thing into a new stack 
			E tempStackItem = myS.pop();
			copyS.push(tempStackItem);

			// loop over the queue			
			while(!myQ.isEmpty()){
				// EQ every thing into a new queue
				E tempQueueItem = myQ.dequeue();
				copyQ.enqueue(tempQueueItem);

				if (tempStackItem == tempQueueItem)
					return true;
			}

		}


		return false;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		SimpleStack<String> ss = new SimpleStack<String>();
		ss.push("a");
		//		System.out.println(ss.)
		ss.push("b");
		ss.push("c");
		System.out.println(ss.peek());
		System.out.println(ss.pop());
		System.out.println(ss.pop());
		//		System.out.println(ss.pop());

	}

}
