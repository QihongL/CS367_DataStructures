//////////////////////////////////////////////////////////////////////////////
//                   ALL STUDENTS COMPLETE THESE SECTIONS
// Main Class File:  SocialNetworkingApp.java
// File:             UndirectedGraph.java
// Semester:         CS367 Spring 2015
// Author:           Qihong Lu
// Email:            qlu36@wisc.edu
// CS Login:         qihong
// Lecturer's Name:  Jim Skrentny
//
//////////////////////////// 80 columns wide /////////////////////////////////
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * This is a generic class that defines that functionality of a undirected 
 * graph. 
 * @author Qihong
 *
 * @param <V>
 */
public class UndirectedGraph<V> implements GraphADT<V>{

	/**
	 * Stores the vertices of this graph, and their adjacency lists.
	 * It's protected rather than private so that subclasses can access it.
	 */
	protected HashMap<V, ArrayList<V>> hashmap;

	public UndirectedGraph() {
		this.hashmap = new HashMap<V, ArrayList<V>>();
	}

	public UndirectedGraph(HashMap<V, ArrayList<V>> hashmap) {
		if (hashmap == null) throw new IllegalArgumentException();
		this.hashmap = hashmap;
	}

	/**
	 * Adds the specified vertex to this graph if not already present. More 
	 * formally, adds the specified vertex v to this graph if this graph 
	 * contains no vertex u such that u.equals(v). If this graph already 
	 * contains such vertex, the call leaves this graph unchanged and returns false.
	 * 
	 * @param vertext - the vertext you want to add
	 */
	@Override
	public boolean addVertex(V vertex) {
		//TODO might need better way of check if the vertex is present
		if(vertex == null) throw new IllegalArgumentException();
		// if vertex do not exist in the hashmap
		if(!hashmap.containsKey(vertex)){
			// put the new vertex into the hashmap  
			hashmap.put(vertex, new ArrayList<V>());
			System.out.println("* vertex <" + vertex.toString() + "> added");//TODO
			return true;
		}
		return false;
	}

	/**
	 * Creates a new edge between vertices v1 and v2 and returns true, if 
	 * v1.equals(v2) evaluates to false and an edge does not already exist 
	 * between v1 and v2. Returns false otherwise.
	 * Vertices v1 and v2 must already exist in this graph. If they are not 
	 * found in the graph IllegalArgumentException is thrown.
	 * 
	 * @param v1 - the first vertex
	 * @param v2 - the second vertex
	 */
	@Override
	public boolean addEdge(V v1, V v2) {
		if(v1 == null || v2 == null) throw new IllegalArgumentException();
		// if they are different vertices 
		if(!v1.equals(v2)){
			// if they are not linked yet
			if(!hashmap.get(v1).contains(v2) && !hashmap.get(v2).contains(v1)){
				// add edge
				hashmap.get(v1).add(v2);
				hashmap.get(v2).add(v1);
//				System.out.println("* edge between <" + v1.toString() + "> and <" + v2.toString() + "> added"); // TODO
				return true;
			}
		} 
		return false;
	}

	/**
	 * Returns a set of all vertices adjacent to v. 
	 * Vertice v must already exist in this graph. If it is not found in 
	 * the graph IllegalArgumentException is thrown.
	 * 
	 * @param vertex
	 */
	@Override
	public Set<V> getNeighbors(V vertex) {
		if(vertex == null || !hashmap.containsKey(vertex)) 
			throw new IllegalArgumentException();
		HashSet hashset = new HashSet<V>();
		// add all item for the input vertex to a hashset
		Iterator itr = hashmap.get(vertex).iterator();		
		while(itr.hasNext()){
			hashset.add(itr.next());
		}
		return hashset;
	}


	/**
	 * If both v1 and v2 exist in the graph, and an edge exists between v1 
	 * and v2, remove the edge from this graph. Otherwise, do nothing.
	 * 
	 * @param v1 - the first vertex
	 * @param v2 - the second vertex
	 */
	@Override
	public void removeEdge(V v1, V v2) {
		if(v1 == null || v2 == null) throw new IllegalArgumentException();
		if(hashmap.containsKey(v1) && hashmap.containsKey(v2)){
			// if they are mutually connected
			if(hashmap.get(v1).contains(v2) && hashmap.get(v2).contains(v1)){
				hashmap.get(v1).remove(v2);
				hashmap.get(v2).remove(v1); 
//				System.out.println("* edge between <" + v1.toString() + "> and <" + v2.toString() + "> removed"); // TODO
			}
		}
	}

	/**
	 * Returns a set of all the vertices in the graph.
	 */
	@Override
	public Set<V> getAllVertices() {
		return hashmap.keySet();
	}

	/** (non-Javadoc)
	 * Returns a print of this graph in adjacency lists form.
	 * 
	 * This method has been written for your convenience (e.g., for debugging).
	 * You are free to modify it or remove the method entirely.
	 * THIS METHOD WILL NOT BE PART OF GRADING.
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringWriter writer = new StringWriter();
		for (V vertex: this.hashmap.keySet()) {
			writer.append(vertex + " -> " + hashmap.get(vertex) + "\n");
		}
		return writer.toString();
	}

}
