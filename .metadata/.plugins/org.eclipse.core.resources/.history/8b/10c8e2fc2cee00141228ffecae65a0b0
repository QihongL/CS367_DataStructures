import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class SocialNetworkingApp {

	static Scanner stdin = new Scanner(System.in);
	static SocialGraph graph;
	static String prompt = ">> ";  // Command prompt

	

	/**
	 * Returns a social network as defined in the file 'filename'.
	 * See assignment handout on the expected file format.
	 * @param filename filename of file containing social connection data
	 * @return
	 * @throws FileNotFoundException if file does not exist
	 */
	public static SocialGraph loadConnections(String filename) throws FileNotFoundException {
		//TODO
		if(filename == null) throw new IllegalArgumentException();
		// connect a scanner to the input file 
		File inputFile = new File(filename);
		SocialGraph tempGraph = new SocialGraph();

		// create all users (vertices)
		Scanner scnr = new Scanner(inputFile);
		while(scnr.hasNext()){
			// identify the username (the 1st element in a line is the user)
			String username = scnr.next();
			tempGraph.addVertex(username);
			if(scnr.hasNext()) scnr.nextLine();	// get rid of the rest 
		}
		
		// create all friends (edges) 
		scnr = new Scanner(inputFile);
		while(scnr.hasNext()){
			String textline = scnr.nextLine();
			// split the text line 
			String [] names = textline.split(" ");
			// identify the user (the 1st element in a line is the user)
			String username = names[0];
			// add the friends (the remaining text represents the friends)
			for(int i = 1; i < names.length; i ++)
				tempGraph.addEdge(username, names[i]);
		} // end of while

		scnr.close(); // close the scanner for reading initial input file 
		return tempGraph;
	}

	/**
	 * Access main menu options to login or exit the application.
	 * 
	 * THIS METHOD HAS BEEN IMPLEMENTED FOR YOU.
	 */
	public static void enterMainMenu() {
		boolean exit = false;
		while (!exit) {
			System.out.print(prompt);
			String[] tokens = stdin.nextLine().split(" ");
			String cmd = tokens[0];
			String person = (tokens.length > 1 ? tokens[1] : null);

			switch(cmd) {
			case "login":
				System.out.println("Logged in as " + person);
				enterSubMenu(person);
				System.out.println("Logged out");
				break;
			case "exit":
				exit = true;
				break;
			default:
				System.out.println("Invalid command");
			}
		}
	}

	/**
	 * Access submenu options to view the social network from the perspective
	 * of currUser. Assumes currUser exists in the network.
	 * @param currUser
	 */
	public static void enterSubMenu(String currUser) {

		// Define the set of commands that have no arguments or one argument
		String commands =
				"friends fof logout print\n" +
						"connection friend unfriend";
		Set<String> noArgCmds = new HashSet<String>
		(Arrays.asList(commands.split("\n")[0].split(" ")));
		Set<String> oneArgCmds = new HashSet<String>
		(Arrays.asList(commands.split("\n")[1].split(" ")));

		boolean logout = false;
		while (!logout) {
			System.out.print(prompt);

			// Read user commands
			String[] tokens = stdin.nextLine().split(" ");
			String cmd = tokens[0];
			String otherPerson = (tokens.length > 1 ? tokens[1] : null);

			// Reject erroneous commands
			// You are free to do additional error checking of user input, but
			// this isn't necessary to receive a full grade.
			if (tokens.length == 0) continue;
			if (!noArgCmds.contains(cmd) && !oneArgCmds.contains(cmd)) {
				System.out.println("Invalid command");
				continue;
			}
			if (oneArgCmds.contains(cmd) && otherPerson == null) {
				System.out.println("Did not specify person");
				continue;
			}

			// switch on the input command
			switch(cmd) {

			case "connection": {
				//TODO
				System.out.println("* connection evoked");
				List <String> path = graph.getPathBetween(currUser, tokens[1]);
				System.out.println(path.toString())
				break;
			}

			case "friends": {
				//TODO
				Set friends = graph.getNeighbors(currUser);
				if(friends.size() <= 0){ 
					System.out.println("You do not have any friends");
				} else { 
					System.out.println(friends.toString()); // TODO order wrong
				}
				break;
			}

			case "fof": {
				//TODO
				graph.friendsOfFriends(currUser);
				break;
			}

			case "friend": {
				//TODO
				graph.addEdge(currUser, tokens[1]);
				break;
			}

			case "unfriend": {
				//TODO
				graph.removeEdge(currUser, tokens[1]);
				break;
			}

			case "print": {
				System.out.println("* print evoked");
				// This command is left here for your debugging needs.
				// You may want to call graph.toString() or graph.pprint() here
				// You are free to modify this or remove this command entirely.
				//
				// YOU DO NOT NEED TO COMPLETE THIS COMMAND
				// THIS COMMAND WILL NOT BE PART OF GRADING
				System.out.println("--------------------------\n"
						+ "The graph:" +"\n" + graph.toString() 
						+ "--------------------------");

				graph.pprint();
				System.out.println("* Get all vertices");
				graph.getAllVertices();
				break;
			}

			case "logout":
				logout = true;
				break;
			}  // End switch
		}
	}

	/**
	 * Commandline interface for a social networking application.
	 *
	 * THIS METHOD HAS BEEN IMPLEMENTED FOR YOU.
	 *
	 * @param args
	 */
	public static void main(String[] args) {

		if (args.length != 1) {
			System.out.println("Usage: java SocialNetworkingApp <filename>");
			return;
		}
		try {
			graph = loadConnections(args[0]);
		} catch (FileNotFoundException e) {
			System.out.println("File not found");
		}

		enterMainMenu();

	}

}
