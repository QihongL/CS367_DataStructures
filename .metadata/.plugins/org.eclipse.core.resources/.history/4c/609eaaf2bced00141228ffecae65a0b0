import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;


public class SocialGraph extends UndirectedGraph<String> {

	/**
	 * Returns a set of 2-degree friends of person, if person exists in this 
	 * graph. Otherwise, throws IllegalArgumentException.
	 * @param person
	 * @return
	 */
	public Set<String> friendsOfFriends(String person) {
		//TODO
		if(person == null) throw new IllegalArgumentException();


		return null;
	}

	/**
	 * Returns the shortest path between two people or null if there is no 
	 * path between them, if both people exist in this graph and they are 
	 * not the same person. Otherwise, throws IllegalArgumentException. The 
	 * returned list should begin with personFrom and end with personTo. Only
	 * returns one path if multiple solutions exist.
	 * @param pForm
	 * @param pTo
	 * @return
	 */
	public List<String> getPathBetween(String pForm, String pTo) {
		//TODO
		if(pForm == null || pTo == null) throw new IllegalArgumentException();

		returns all vertices in the graph that have a shortest path of length N from start

		frontier <- Create new queue with start as the only element

		// As an alternative to marking vertices as visited/unvisited,
		// 'explored' maintains the set of vertices that have been visited.
		explored <- Create new empty set

		// Map every vertex in frontier and explored to its depth
		depths <- Create new empty hashmap
		depths.put(start, 0)

		while (frontier is not empty)
		  vertex <- frontier.dequeue()
		  if (depths[vertex] > N) break
		  explored.add(vertex)

		  foreach neighbor of vertex
		    if (neighbor is not in frontier or explored)
		      depths.put(neighbor, depths[vertex] + 1)
		      frontier.enqueue(neighbor)

		return (all vertices in depths with depth N)
		
		
		return null;
	}

	/**
	 * Returns a pretty-print of this graph in adjacency matrix form.
	 * People are sorted in alphabetical order, "X" denotes friendship.
	 * 
	 * This method has been written for your convenience (e.g., for debugging).
	 * You are free to modify it or remove the method entirely.
	 * THIS METHOD WILL NOT BE PART OF GRADING.
	 *
	 * NOTE: this method assumes that the internal hashmap is valid (e.g., no
	 * loop, graph is not a multigraph). USE IT AT YOUR OWN RISK.
	 *
	 * @return pretty-print of this graph
	 */
	public String pprint() {
		// Get alphabetical list of people, for prettiness
		List<String> people = new ArrayList<String>(this.hashmap.keySet());
		Collections.sort(people);

		// String writer is easier than appending tons of strings
		StringWriter writer = new StringWriter();

		// Print labels for matrix columns
		writer.append("   ");
		for (String person: people)
			writer.append(" " + person);
		writer.append("\n");

		// Print one line of social connections for each person
		for (String source: people) {
			writer.append(source);
			for (String target: people) {
				if (this.getNeighbors(source).contains(target))
					writer.append("  X ");
				else
					writer.append("    ");
			}
			writer.append("\n");

		}

		// Remove last newline so that multiple printlns don't have empty
		// lines in between
		String string = writer.toString();
		return string.substring(0, string.length() - 1);
	}

}
